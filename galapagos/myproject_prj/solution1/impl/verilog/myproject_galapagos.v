// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="myproject_galapagos,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcku115-flva1517-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.312000,HLS_SYN_LAT=115,HLS_SYN_TPT=none,HLS_SYN_MEM=18,HLS_SYN_DSP=792,HLS_SYN_FF=44641,HLS_SYN_LUT=43343,HLS_VERSION=2018_2}" *)

module myproject_galapagos (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_V_data_V_dout,
        in_V_data_V_empty_n,
        in_V_data_V_read,
        in_V_dest_V_dout,
        in_V_dest_V_empty_n,
        in_V_dest_V_read,
        in_V_last_V_dout,
        in_V_last_V_empty_n,
        in_V_last_V_read,
        in_V_id_V_dout,
        in_V_id_V_empty_n,
        in_V_id_V_read,
        in_V_user_V_dout,
        in_V_user_V_empty_n,
        in_V_user_V_read,
        in_V_keep_V_dout,
        in_V_keep_V_empty_n,
        in_V_keep_V_read,
        out_V_data_V_din,
        out_V_data_V_full_n,
        out_V_data_V_write,
        out_V_dest_V_din,
        out_V_dest_V_full_n,
        out_V_dest_V_write,
        out_V_last_V_din,
        out_V_last_V_full_n,
        out_V_last_V_write,
        out_V_id_V_din,
        out_V_id_V_full_n,
        out_V_id_V_write,
        out_V_user_V_din,
        out_V_user_V_full_n,
        out_V_user_V_write,
        out_V_keep_V_din,
        out_V_keep_V_full_n,
        out_V_keep_V_write
);

parameter    ap_ST_fsm_state1 = 23'd1;
parameter    ap_ST_fsm_state2 = 23'd2;
parameter    ap_ST_fsm_state3 = 23'd4;
parameter    ap_ST_fsm_state4 = 23'd8;
parameter    ap_ST_fsm_state5 = 23'd16;
parameter    ap_ST_fsm_state6 = 23'd32;
parameter    ap_ST_fsm_state7 = 23'd64;
parameter    ap_ST_fsm_state8 = 23'd128;
parameter    ap_ST_fsm_state9 = 23'd256;
parameter    ap_ST_fsm_state10 = 23'd512;
parameter    ap_ST_fsm_state11 = 23'd1024;
parameter    ap_ST_fsm_state12 = 23'd2048;
parameter    ap_ST_fsm_state13 = 23'd4096;
parameter    ap_ST_fsm_state14 = 23'd8192;
parameter    ap_ST_fsm_state15 = 23'd16384;
parameter    ap_ST_fsm_state16 = 23'd32768;
parameter    ap_ST_fsm_state17 = 23'd65536;
parameter    ap_ST_fsm_state18 = 23'd131072;
parameter    ap_ST_fsm_state19 = 23'd262144;
parameter    ap_ST_fsm_state20 = 23'd524288;
parameter    ap_ST_fsm_state21 = 23'd1048576;
parameter    ap_ST_fsm_state22 = 23'd2097152;
parameter    ap_ST_fsm_state23 = 23'd4194304;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] in_V_data_V_dout;
input   in_V_data_V_empty_n;
output   in_V_data_V_read;
input  [7:0] in_V_dest_V_dout;
input   in_V_dest_V_empty_n;
output   in_V_dest_V_read;
input  [0:0] in_V_last_V_dout;
input   in_V_last_V_empty_n;
output   in_V_last_V_read;
input  [7:0] in_V_id_V_dout;
input   in_V_id_V_empty_n;
output   in_V_id_V_read;
input  [39:0] in_V_user_V_dout;
input   in_V_user_V_empty_n;
output   in_V_user_V_read;
input  [7:0] in_V_keep_V_dout;
input   in_V_keep_V_empty_n;
output   in_V_keep_V_read;
output  [63:0] out_V_data_V_din;
input   out_V_data_V_full_n;
output   out_V_data_V_write;
output  [7:0] out_V_dest_V_din;
input   out_V_dest_V_full_n;
output   out_V_dest_V_write;
output  [0:0] out_V_last_V_din;
input   out_V_last_V_full_n;
output   out_V_last_V_write;
output  [7:0] out_V_id_V_din;
input   out_V_id_V_full_n;
output   out_V_id_V_write;
output  [39:0] out_V_user_V_din;
input   out_V_user_V_full_n;
output   out_V_user_V_write;
output  [7:0] out_V_keep_V_din;
input   out_V_keep_V_full_n;
output   out_V_keep_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [22:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    in_V_data_V_blk_n;
wire    ap_CS_fsm_state4;
reg    in_V_dest_V_blk_n;
reg    in_V_last_V_blk_n;
reg    in_V_id_V_blk_n;
reg    in_V_user_V_blk_n;
reg    in_V_keep_V_blk_n;
reg    out_V_data_V_blk_n;
wire    ap_CS_fsm_state23;
reg    out_V_dest_V_blk_n;
reg    out_V_last_V_blk_n;
reg    out_V_id_V_blk_n;
reg    out_V_user_V_blk_n;
reg    out_V_keep_V_blk_n;
wire   [2:0] i_1_fu_240_p2;
reg   [2:0] i_1_reg_866;
wire    ap_CS_fsm_state2;
wire   [6:0] tmp_s_fu_250_p3;
reg   [6:0] tmp_s_reg_871;
wire   [0:0] exitcond1_fu_234_p2;
wire   [6:0] tmp_79_fu_258_p2;
reg   [6:0] tmp_79_reg_877;
wire   [2:0] j_1_fu_270_p2;
reg   [2:0] j_1_reg_886;
wire    ap_CS_fsm_state3;
wire   [9:0] tmp_82_fu_276_p3;
reg   [9:0] tmp_82_reg_891;
wire   [0:0] exitcond2_fu_264_p2;
wire   [9:0] tmp_83_fu_286_p2;
reg   [9:0] tmp_83_reg_901;
wire   [0:0] grp_fu_225_p2;
reg   [0:0] tmp_286_reg_908;
wire   [9:0] grp_fu_229_p2;
reg   [9:0] tmp_289_reg_914;
wire   [9:0] tmp_294_fu_313_p2;
reg   [9:0] tmp_294_reg_919;
wire    in_V_id_V0_status;
wire   [127:0] tmp_321_fu_523_p2;
reg   [127:0] tmp_321_reg_929;
reg   [0:0] tmp_322_reg_934;
wire   [191:0] res_str_ext_fu_650_p1;
reg   [191:0] res_str_ext_reg_942;
wire    ap_CS_fsm_state20;
wire   [2:0] i_2_fu_660_p2;
reg   [2:0] i_2_reg_951;
wire    ap_CS_fsm_state21;
wire   [7:0] tmp_277_fu_736_p2;
reg   [7:0] tmp_277_reg_956;
wire   [0:0] exitcond_fu_654_p2;
wire   [191:0] tmp_280_fu_746_p2;
reg   [191:0] tmp_280_reg_961;
wire   [0:0] gp_last_V_fu_752_p2;
reg   [0:0] gp_last_V_reg_966;
wire   [7:0] p_6_fu_814_p3;
reg   [7:0] p_6_reg_971;
wire    ap_CS_fsm_state22;
wire    grp_myproject_fu_216_ap_start;
wire    grp_myproject_fu_216_ap_done;
wire    grp_myproject_fu_216_ap_idle;
wire    grp_myproject_fu_216_ap_ready;
wire   [188:0] grp_myproject_fu_216_ap_return;
wire    grp_myproject_fu_216_data_V_blk_n;
reg   [2:0] i_reg_183;
reg   [2:0] j_reg_194;
wire    ap_CS_fsm_state5;
reg   [2:0] i5_reg_205;
wire    out_V_id_V1_status;
reg    grp_myproject_fu_216_ap_start_reg;
reg   [22:0] ap_NS_fsm;
wire    ap_NS_fsm_state6;
reg   [767:0] data_str_V_fu_140;
wire    ap_CS_fsm_state6;
reg    in_V_id_V0_update;
reg    out_V_id_V1_update;
reg   [7:0] tmp_id_V_fu_128;
reg   [39:0] tmp_user_V_fu_132;
reg   [7:0] tmp_keep_V_fu_136;
wire   [767:0] data_str_V_1_fu_639_p2;
reg   [9:0] grp_fu_225_p0;
reg   [9:0] grp_fu_225_p1;
reg   [9:0] grp_fu_229_p1;
wire   [1:0] tmp_fu_246_p1;
wire   [9:0] tmp_288_fu_293_p2;
wire   [9:0] tmp_290_fu_299_p2;
wire   [9:0] tmp_291_fu_305_p3;
wire   [7:0] tmp_285_fu_335_p1;
reg   [767:0] tmp_287_fu_350_p4;
wire   [9:0] tmp_293_fu_367_p3;
wire   [767:0] tmp_292_fu_360_p3;
wire   [767:0] tmp_295_fu_372_p1;
wire   [767:0] tmp_296_fu_376_p1;
wire   [767:0] tmp_297_fu_379_p2;
wire   [767:0] tmp_298_fu_385_p2;
wire   [767:0] tmp_299_fu_391_p2;
wire   [31:0] tmp_4_fu_339_p3;
wire   [7:0] tmp_302_fu_405_p1;
wire   [0:0] tmp_301_fu_401_p2;
wire   [7:0] tmp_303_fu_408_p1;
wire   [7:0] tmp_305_fu_415_p2;
wire   [7:0] tmp_306_fu_421_p3;
wire   [7:0] tmp_308_fu_437_p3;
wire   [7:0] tmp_307_fu_429_p3;
wire   [7:0] tmp_309_fu_445_p2;
wire   [127:0] tmp_304_fu_411_p1;
wire   [127:0] tmp_310_fu_451_p1;
wire   [127:0] tmp_313_fu_463_p2;
reg   [127:0] tmp_314_fu_469_p4;
wire   [127:0] tmp_311_fu_455_p1;
wire   [127:0] tmp_312_fu_459_p1;
wire   [127:0] tmp_316_fu_487_p2;
wire   [127:0] tmp_317_fu_493_p2;
wire   [127:0] p_demorgan_fu_499_p2;
wire   [127:0] tmp_300_fu_397_p1;
wire   [127:0] tmp_318_fu_505_p2;
wire   [127:0] tmp_315_fu_479_p3;
wire   [127:0] tmp_319_fu_511_p2;
wire   [127:0] tmp_320_fu_517_p2;
wire   [9:0] tmp_325_fu_547_p3;
wire   [9:0] tmp_327_fu_557_p3;
wire   [9:0] tmp_326_fu_552_p3;
wire   [9:0] tmp_328_fu_563_p2;
wire   [767:0] tmp_323_fu_544_p1;
wire   [767:0] tmp_329_fu_569_p1;
wire   [767:0] tmp_332_fu_581_p2;
reg   [767:0] tmp_333_fu_587_p4;
wire   [767:0] tmp_330_fu_573_p1;
wire   [767:0] tmp_331_fu_577_p1;
wire   [767:0] tmp_335_fu_604_p2;
wire   [767:0] tmp_336_fu_610_p2;
wire   [767:0] p_demorgan1_fu_616_p2;
wire   [767:0] tmp_337_fu_622_p2;
wire   [767:0] tmp_334_fu_597_p3;
wire   [767:0] tmp_338_fu_628_p2;
wire   [767:0] tmp_339_fu_633_p2;
wire   [7:0] tmp_80_fu_666_p3;
wire   [7:0] tmp_81_fu_674_p2;
wire   [0:0] tmp_269_fu_680_p2;
wire   [7:0] tmp_271_fu_695_p2;
wire   [7:0] tmp_273_fu_707_p2;
reg   [191:0] tmp_270_fu_686_p4;
wire   [7:0] tmp_272_fu_701_p2;
wire   [7:0] tmp_274_fu_713_p3;
wire   [7:0] tmp_276_fu_728_p3;
wire   [191:0] tmp_275_fu_721_p3;
wire   [191:0] tmp_278_fu_742_p1;
wire   [191:0] tmp_279_fu_758_p1;
wire   [191:0] tmp_281_fu_761_p2;
wire   [191:0] tmp_282_fu_767_p2;
wire   [23:0] tmp_284_fu_790_p1;
wire   [7:0] ret_V_fu_772_p4;
wire   [0:0] tmp_5_fu_794_p2;
wire   [7:0] ret_V_1_fu_800_p2;
wire   [0:0] tmp_283_fu_782_p3;
wire   [7:0] p_s_fu_806_p3;

// power-on initialization
initial begin
#0 ap_CS_fsm = 23'd1;
#0 grp_myproject_fu_216_ap_start_reg = 1'b0;
end

myproject grp_myproject_fu_216(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_myproject_fu_216_ap_start),
    .ap_done(grp_myproject_fu_216_ap_done),
    .ap_idle(grp_myproject_fu_216_ap_idle),
    .ap_ready(grp_myproject_fu_216_ap_ready),
    .data_V_ap_vld(1'b1),
    .data_V(data_str_V_fu_140),
    .ap_return(grp_myproject_fu_216_ap_return),
    .data_V_blk_n(grp_myproject_fu_216_data_V_blk_n)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_myproject_fu_216_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state6) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_myproject_fu_216_ap_start_reg <= 1'b1;
        end else if ((grp_myproject_fu_216_ap_ready == 1'b1)) begin
            grp_myproject_fu_216_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((out_V_id_V1_status == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
        i5_reg_205 <= i_2_reg_951;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        i5_reg_205 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_264_p2 == 1'd1))) begin
        i_reg_183 <= i_1_reg_866;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_183 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_234_p2 == 1'd0))) begin
        j_reg_194 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        j_reg_194 <= j_1_reg_886;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        data_str_V_fu_140 <= data_str_V_1_fu_639_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) & (exitcond_fu_654_p2 == 1'd0))) begin
        gp_last_V_reg_966 <= gp_last_V_fu_752_p2;
        tmp_277_reg_956[7 : 1] <= tmp_277_fu_736_p2[7 : 1];
        tmp_280_reg_961 <= tmp_280_fu_746_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_866 <= i_1_fu_240_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        i_2_reg_951 <= i_2_fu_660_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_1_reg_886 <= j_1_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        p_6_reg_971 <= p_6_fu_814_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        res_str_ext_reg_942[188 : 0] <= res_str_ext_fu_650_p1[188 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_264_p2 == 1'd0))) begin
        tmp_286_reg_908 <= grp_fu_225_p2;
        tmp_289_reg_914 <= grp_fu_229_p2;
        tmp_294_reg_919[9 : 1] <= tmp_294_fu_313_p2[9 : 1];
        tmp_82_reg_891[9 : 7] <= tmp_82_fu_276_p3[9 : 7];
        tmp_83_reg_901[9 : 7] <= tmp_83_fu_286_p2[9 : 7];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (in_V_id_V0_status == 1'b1))) begin
        tmp_321_reg_929 <= tmp_321_fu_523_p2;
        tmp_322_reg_934 <= grp_fu_225_p2;
        tmp_id_V_fu_128 <= in_V_id_V_dout;
        tmp_keep_V_fu_136 <= in_V_keep_V_dout;
        tmp_user_V_fu_132 <= in_V_user_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_234_p2 == 1'd0))) begin
        tmp_79_reg_877[6 : 5] <= tmp_79_fu_258_p2[6 : 5];
        tmp_s_reg_871[6 : 5] <= tmp_s_fu_250_p3[6 : 5];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) & (exitcond_fu_654_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) & (exitcond_fu_654_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_225_p0 = tmp_82_reg_891;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_225_p0 = tmp_82_fu_276_p3;
    end else begin
        grp_fu_225_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_225_p1 = tmp_83_reg_901;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_225_p1 = tmp_83_fu_286_p2;
    end else begin
        grp_fu_225_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_229_p1 = tmp_82_reg_891;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_229_p1 = tmp_82_fu_276_p3;
    end else begin
        grp_fu_229_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        in_V_data_V_blk_n = in_V_data_V_empty_n;
    end else begin
        in_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        in_V_dest_V_blk_n = in_V_dest_V_empty_n;
    end else begin
        in_V_dest_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (in_V_id_V0_status == 1'b1))) begin
        in_V_id_V0_update = 1'b1;
    end else begin
        in_V_id_V0_update = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        in_V_id_V_blk_n = in_V_id_V_empty_n;
    end else begin
        in_V_id_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        in_V_keep_V_blk_n = in_V_keep_V_empty_n;
    end else begin
        in_V_keep_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        in_V_last_V_blk_n = in_V_last_V_empty_n;
    end else begin
        in_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        in_V_user_V_blk_n = in_V_user_V_empty_n;
    end else begin
        in_V_user_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        out_V_data_V_blk_n = out_V_data_V_full_n;
    end else begin
        out_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        out_V_dest_V_blk_n = out_V_dest_V_full_n;
    end else begin
        out_V_dest_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((out_V_id_V1_status == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
        out_V_id_V1_update = 1'b1;
    end else begin
        out_V_id_V1_update = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        out_V_id_V_blk_n = out_V_id_V_full_n;
    end else begin
        out_V_id_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        out_V_keep_V_blk_n = out_V_keep_V_full_n;
    end else begin
        out_V_keep_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        out_V_last_V_blk_n = out_V_last_V_full_n;
    end else begin
        out_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        out_V_user_V_blk_n = out_V_user_V_full_n;
    end else begin
        out_V_user_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_234_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_264_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (in_V_id_V0_status == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (exitcond_fu_654_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((out_V_id_V1_status == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_NS_fsm_state6 = ap_NS_fsm[32'd5];

assign data_str_V_1_fu_639_p2 = (tmp_339_fu_633_p2 | tmp_338_fu_628_p2);

assign exitcond1_fu_234_p2 = ((i_reg_183 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond2_fu_264_p2 = ((j_reg_194 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond_fu_654_p2 = ((i5_reg_205 == 3'd6) ? 1'b1 : 1'b0);

assign gp_last_V_fu_752_p2 = ((i5_reg_205 == 3'd5) ? 1'b1 : 1'b0);

assign grp_fu_225_p2 = ((grp_fu_225_p0 > grp_fu_225_p1) ? 1'b1 : 1'b0);

assign grp_fu_229_p2 = ($signed(10'd767) - $signed(grp_fu_229_p1));

assign grp_myproject_fu_216_ap_start = grp_myproject_fu_216_ap_start_reg;

assign i_1_fu_240_p2 = (i_reg_183 + 3'd1);

assign i_2_fu_660_p2 = (i5_reg_205 + 3'd1);

assign in_V_data_V_read = in_V_id_V0_update;

assign in_V_dest_V_read = in_V_id_V0_update;

assign in_V_id_V0_status = (in_V_user_V_empty_n & in_V_last_V_empty_n & in_V_keep_V_empty_n & in_V_id_V_empty_n & in_V_dest_V_empty_n & in_V_data_V_empty_n);

assign in_V_id_V_read = in_V_id_V0_update;

assign in_V_keep_V_read = in_V_id_V0_update;

assign in_V_last_V_read = in_V_id_V0_update;

assign in_V_user_V_read = in_V_id_V0_update;

assign j_1_fu_270_p2 = (j_reg_194 + 3'd1);

assign out_V_data_V_din = $signed(p_6_reg_971);

assign out_V_data_V_write = out_V_id_V1_update;

assign out_V_dest_V_din = 8'd0;

assign out_V_dest_V_write = out_V_id_V1_update;

assign out_V_id_V1_status = (out_V_user_V_full_n & out_V_last_V_full_n & out_V_keep_V_full_n & out_V_id_V_full_n & out_V_dest_V_full_n & out_V_data_V_full_n);

assign out_V_id_V_din = tmp_id_V_fu_128;

assign out_V_id_V_write = out_V_id_V1_update;

assign out_V_keep_V_din = tmp_keep_V_fu_136;

assign out_V_keep_V_write = out_V_id_V1_update;

assign out_V_last_V_din = gp_last_V_reg_966;

assign out_V_last_V_write = out_V_id_V1_update;

assign out_V_user_V_din = tmp_user_V_fu_132;

assign out_V_user_V_write = out_V_id_V1_update;

assign p_6_fu_814_p3 = ((tmp_283_fu_782_p3[0:0] === 1'b1) ? p_s_fu_806_p3 : ret_V_fu_772_p4);

assign p_demorgan1_fu_616_p2 = (tmp_336_fu_610_p2 & tmp_335_fu_604_p2);

assign p_demorgan_fu_499_p2 = (tmp_317_fu_493_p2 & tmp_316_fu_487_p2);

assign p_s_fu_806_p3 = ((tmp_5_fu_794_p2[0:0] === 1'b1) ? ret_V_fu_772_p4 : ret_V_1_fu_800_p2);

assign res_str_ext_fu_650_p1 = grp_myproject_fu_216_ap_return;

assign ret_V_1_fu_800_p2 = (8'd1 + ret_V_fu_772_p4);

assign ret_V_fu_772_p4 = {{tmp_282_fu_767_p2[31:24]}};

assign tmp_269_fu_680_p2 = ((tmp_80_fu_666_p3 > tmp_81_fu_674_p2) ? 1'b1 : 1'b0);

integer ap_tvar_int_0;

always @ (res_str_ext_reg_942) begin
    for (ap_tvar_int_0 = 192 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 191 - 0) begin
            tmp_270_fu_686_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_270_fu_686_p4[ap_tvar_int_0] = res_str_ext_reg_942[191 - ap_tvar_int_0];
        end
    end
end

assign tmp_271_fu_695_p2 = (tmp_80_fu_666_p3 - tmp_81_fu_674_p2);

assign tmp_272_fu_701_p2 = ($signed(8'd191) - $signed(tmp_80_fu_666_p3));

assign tmp_273_fu_707_p2 = (tmp_81_fu_674_p2 - tmp_80_fu_666_p3);

assign tmp_274_fu_713_p3 = ((tmp_269_fu_680_p2[0:0] === 1'b1) ? tmp_271_fu_695_p2 : tmp_273_fu_707_p2);

assign tmp_275_fu_721_p3 = ((tmp_269_fu_680_p2[0:0] === 1'b1) ? tmp_270_fu_686_p4 : res_str_ext_reg_942);

assign tmp_276_fu_728_p3 = ((tmp_269_fu_680_p2[0:0] === 1'b1) ? tmp_272_fu_701_p2 : tmp_80_fu_666_p3);

assign tmp_277_fu_736_p2 = ($signed(8'd191) - $signed(tmp_274_fu_713_p3));

assign tmp_278_fu_742_p1 = tmp_276_fu_728_p3;

assign tmp_279_fu_758_p1 = tmp_277_reg_956;

assign tmp_280_fu_746_p2 = tmp_275_fu_721_p3 >> tmp_278_fu_742_p1;

assign tmp_281_fu_761_p2 = 192'd6277101735386680763835789423207666416102355444464034512895 >> tmp_279_fu_758_p1;

assign tmp_282_fu_767_p2 = (tmp_281_fu_761_p2 & tmp_280_reg_961);

assign tmp_283_fu_782_p3 = tmp_282_fu_767_p2[32'd31];

assign tmp_284_fu_790_p1 = tmp_282_fu_767_p2[23:0];

assign tmp_285_fu_335_p1 = in_V_data_V_dout[7:0];

integer ap_tvar_int_1;

always @ (data_str_V_fu_140) begin
    for (ap_tvar_int_1 = 768 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 767 - 0) begin
            tmp_287_fu_350_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_287_fu_350_p4[ap_tvar_int_1] = data_str_V_fu_140[767 - ap_tvar_int_1];
        end
    end
end

assign tmp_288_fu_293_p2 = (tmp_82_fu_276_p3 - tmp_83_fu_286_p2);

assign tmp_290_fu_299_p2 = (tmp_83_fu_286_p2 - tmp_82_fu_276_p3);

assign tmp_291_fu_305_p3 = ((grp_fu_225_p2[0:0] === 1'b1) ? tmp_288_fu_293_p2 : tmp_290_fu_299_p2);

assign tmp_292_fu_360_p3 = ((tmp_286_reg_908[0:0] === 1'b1) ? tmp_287_fu_350_p4 : data_str_V_fu_140);

assign tmp_293_fu_367_p3 = ((tmp_286_reg_908[0:0] === 1'b1) ? tmp_289_reg_914 : tmp_82_reg_891);

assign tmp_294_fu_313_p2 = ($signed(10'd767) - $signed(tmp_291_fu_305_p3));

assign tmp_295_fu_372_p1 = tmp_293_fu_367_p3;

assign tmp_296_fu_376_p1 = tmp_294_reg_919;

assign tmp_297_fu_379_p2 = tmp_292_fu_360_p3 >> tmp_295_fu_372_p1;

assign tmp_298_fu_385_p2 = 768'd1552518092300708935148979488462502555256886017116696611139052038026050952686376886330878408828646477950487730697131073206171580044114814391444287275041181139204454976020849905550265285631598444825262999193716468750892846853816057855 >> tmp_296_fu_376_p1;

assign tmp_299_fu_391_p2 = (tmp_298_fu_385_p2 & tmp_297_fu_379_p2);

assign tmp_300_fu_397_p1 = tmp_299_fu_391_p2[127:0];

assign tmp_301_fu_401_p2 = ((tmp_s_reg_871 > tmp_79_reg_877) ? 1'b1 : 1'b0);

assign tmp_302_fu_405_p1 = tmp_s_reg_871;

assign tmp_303_fu_408_p1 = tmp_79_reg_877;

assign tmp_304_fu_411_p1 = tmp_4_fu_339_p3;

assign tmp_305_fu_415_p2 = (tmp_302_fu_405_p1 ^ 8'd127);

assign tmp_306_fu_421_p3 = ((tmp_301_fu_401_p2[0:0] === 1'b1) ? tmp_302_fu_405_p1 : tmp_303_fu_408_p1);

assign tmp_307_fu_429_p3 = ((tmp_301_fu_401_p2[0:0] === 1'b1) ? tmp_303_fu_408_p1 : tmp_302_fu_405_p1);

assign tmp_308_fu_437_p3 = ((tmp_301_fu_401_p2[0:0] === 1'b1) ? tmp_305_fu_415_p2 : tmp_302_fu_405_p1);

assign tmp_309_fu_445_p2 = (tmp_306_fu_421_p3 ^ 8'd127);

assign tmp_310_fu_451_p1 = tmp_308_fu_437_p3;

assign tmp_311_fu_455_p1 = tmp_307_fu_429_p3;

assign tmp_312_fu_459_p1 = tmp_309_fu_445_p2;

assign tmp_313_fu_463_p2 = tmp_304_fu_411_p1 << tmp_310_fu_451_p1;

integer ap_tvar_int_2;

always @ (tmp_313_fu_463_p2) begin
    for (ap_tvar_int_2 = 128 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 127 - 0) begin
            tmp_314_fu_469_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_314_fu_469_p4[ap_tvar_int_2] = tmp_313_fu_463_p2[127 - ap_tvar_int_2];
        end
    end
end

assign tmp_315_fu_479_p3 = ((tmp_301_fu_401_p2[0:0] === 1'b1) ? tmp_314_fu_469_p4 : tmp_313_fu_463_p2);

assign tmp_316_fu_487_p2 = 128'd340282366920938463463374607431768211455 << tmp_311_fu_455_p1;

assign tmp_317_fu_493_p2 = 128'd340282366920938463463374607431768211455 >> tmp_312_fu_459_p1;

assign tmp_318_fu_505_p2 = (p_demorgan_fu_499_p2 ^ 128'd340282366920938463463374607431768211455);

assign tmp_319_fu_511_p2 = (tmp_318_fu_505_p2 & tmp_300_fu_397_p1);

assign tmp_320_fu_517_p2 = (tmp_315_fu_479_p3 & p_demorgan_fu_499_p2);

assign tmp_321_fu_523_p2 = (tmp_320_fu_517_p2 | tmp_319_fu_511_p2);

assign tmp_323_fu_544_p1 = tmp_321_reg_929;

assign tmp_325_fu_547_p3 = ((tmp_322_reg_934[0:0] === 1'b1) ? tmp_82_reg_891 : tmp_83_reg_901);

assign tmp_326_fu_552_p3 = ((tmp_322_reg_934[0:0] === 1'b1) ? tmp_83_reg_901 : tmp_82_reg_891);

assign tmp_327_fu_557_p3 = ((tmp_322_reg_934[0:0] === 1'b1) ? grp_fu_229_p2 : tmp_82_reg_891);

assign tmp_328_fu_563_p2 = ($signed(10'd767) - $signed(tmp_325_fu_547_p3));

assign tmp_329_fu_569_p1 = tmp_327_fu_557_p3;

assign tmp_330_fu_573_p1 = tmp_326_fu_552_p3;

assign tmp_331_fu_577_p1 = tmp_328_fu_563_p2;

assign tmp_332_fu_581_p2 = tmp_323_fu_544_p1 << tmp_329_fu_569_p1;

integer ap_tvar_int_3;

always @ (tmp_332_fu_581_p2) begin
    for (ap_tvar_int_3 = 768 - 1; ap_tvar_int_3 >= 0; ap_tvar_int_3 = ap_tvar_int_3 - 1) begin
        if (ap_tvar_int_3 > 767 - 0) begin
            tmp_333_fu_587_p4[ap_tvar_int_3] = 1'b0;
        end else begin
            tmp_333_fu_587_p4[ap_tvar_int_3] = tmp_332_fu_581_p2[767 - ap_tvar_int_3];
        end
    end
end

assign tmp_334_fu_597_p3 = ((tmp_322_reg_934[0:0] === 1'b1) ? tmp_333_fu_587_p4 : tmp_332_fu_581_p2);

assign tmp_335_fu_604_p2 = 768'd1552518092300708935148979488462502555256886017116696611139052038026050952686376886330878408828646477950487730697131073206171580044114814391444287275041181139204454976020849905550265285631598444825262999193716468750892846853816057855 << tmp_330_fu_573_p1;

assign tmp_336_fu_610_p2 = 768'd1552518092300708935148979488462502555256886017116696611139052038026050952686376886330878408828646477950487730697131073206171580044114814391444287275041181139204454976020849905550265285631598444825262999193716468750892846853816057855 >> tmp_331_fu_577_p1;

assign tmp_337_fu_622_p2 = (p_demorgan1_fu_616_p2 ^ 768'd1552518092300708935148979488462502555256886017116696611139052038026050952686376886330878408828646477950487730697131073206171580044114814391444287275041181139204454976020849905550265285631598444825262999193716468750892846853816057855);

assign tmp_338_fu_628_p2 = (tmp_337_fu_622_p2 & data_str_V_fu_140);

assign tmp_339_fu_633_p2 = (tmp_334_fu_597_p3 & p_demorgan1_fu_616_p2);

assign tmp_4_fu_339_p3 = {{tmp_285_fu_335_p1}, {24'd0}};

assign tmp_5_fu_794_p2 = ((tmp_284_fu_790_p1 == 24'd0) ? 1'b1 : 1'b0);

assign tmp_79_fu_258_p2 = (tmp_s_fu_250_p3 | 7'd31);

assign tmp_80_fu_666_p3 = {{i5_reg_205}, {5'd0}};

assign tmp_81_fu_674_p2 = (tmp_80_fu_666_p3 | 8'd31);

assign tmp_82_fu_276_p3 = {{j_reg_194}, {7'd0}};

assign tmp_83_fu_286_p2 = (tmp_82_fu_276_p3 | 10'd127);

assign tmp_fu_246_p1 = i_reg_183[1:0];

assign tmp_s_fu_250_p3 = {{tmp_fu_246_p1}, {5'd0}};

always @ (posedge ap_clk) begin
    tmp_s_reg_871[4:0] <= 5'b00000;
    tmp_79_reg_877[4:0] <= 5'b11111;
    tmp_82_reg_891[6:0] <= 7'b0000000;
    tmp_83_reg_901[6:0] <= 7'b1111111;
    tmp_294_reg_919[0] <= 1'b0;
    res_str_ext_reg_942[191:189] <= 3'b000;
    tmp_277_reg_956[0] <= 1'b0;
end

endmodule //myproject_galapagos
