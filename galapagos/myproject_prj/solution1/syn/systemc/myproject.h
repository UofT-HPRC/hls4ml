// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _myproject_HH_
#define _myproject_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "conv_1d_0_0_0_0.h"
#include "compute_layer_0_0_0_s.h"
#include "softmax.h"
#include "relu.h"

namespace ap_rtl {

struct myproject : public sc_module {
    // Port declarations 10
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_logic > data_V_ap_vld;
    sc_in< sc_lv<768> > data_V;
    sc_out< sc_lv<189> > ap_return;
    sc_out< sc_logic > data_V_blk_n;


    // Module declarations
    myproject(sc_module_name name);
    SC_HAS_PROCESS(myproject);

    ~myproject();

    sc_trace_file* mVcdFile;

    conv_1d_0_0_0_0* grp_conv_1d_0_0_0_0_fu_36;
    compute_layer_0_0_0_s* grp_compute_layer_0_0_0_s_fu_42;
    softmax* grp_softmax_fu_58;
    relu* call_ret2_relu_fu_72;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter6;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter7;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter8;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter9;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter10;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter11;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter12;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter13;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter14;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter5;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter6;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter7;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter8;
    sc_signal< bool > ap_block_state10_pp0_stage0_iter9;
    sc_signal< bool > ap_block_state11_pp0_stage0_iter10;
    sc_signal< bool > ap_block_state12_pp0_stage0_iter11;
    sc_signal< bool > ap_block_state13_pp0_stage0_iter12;
    sc_signal< bool > ap_block_state14_pp0_stage0_iter13;
    sc_signal< bool > ap_block_state15_pp0_stage0_iter14;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<32> > logits2_0_V_reg_297;
    sc_signal< sc_lv<32> > logits2_1_V_reg_302;
    sc_signal< sc_lv<32> > logits2_2_V_reg_307;
    sc_signal< sc_lv<32> > logits2_3_V_reg_312;
    sc_signal< sc_lv<32> > logits2_4_V_reg_317;
    sc_signal< sc_lv<32> > logits2_5_V_reg_322;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_lv<32> > grp_conv_1d_0_0_0_0_fu_36_ap_return_0;
    sc_signal< sc_lv<32> > grp_conv_1d_0_0_0_0_fu_36_ap_return_1;
    sc_signal< sc_lv<32> > grp_conv_1d_0_0_0_0_fu_36_ap_return_2;
    sc_signal< sc_lv<32> > grp_conv_1d_0_0_0_0_fu_36_ap_return_3;
    sc_signal< sc_lv<32> > grp_conv_1d_0_0_0_0_fu_36_ap_return_4;
    sc_signal< sc_lv<32> > grp_conv_1d_0_0_0_0_fu_36_ap_return_5;
    sc_signal< sc_lv<32> > grp_conv_1d_0_0_0_0_fu_36_ap_return_6;
    sc_signal< sc_lv<32> > grp_conv_1d_0_0_0_0_fu_36_ap_return_7;
    sc_signal< sc_lv<32> > grp_conv_1d_0_0_0_0_fu_36_ap_return_8;
    sc_signal< sc_lv<32> > grp_conv_1d_0_0_0_0_fu_36_ap_return_9;
    sc_signal< sc_lv<32> > grp_conv_1d_0_0_0_0_fu_36_ap_return_10;
    sc_signal< sc_lv<32> > grp_conv_1d_0_0_0_0_fu_36_ap_return_11;
    sc_signal< sc_logic > grp_conv_1d_0_0_0_0_fu_36_ap_ce;
    sc_signal< sc_lv<32> > grp_compute_layer_0_0_0_s_fu_42_ap_return_0;
    sc_signal< sc_lv<32> > grp_compute_layer_0_0_0_s_fu_42_ap_return_1;
    sc_signal< sc_lv<32> > grp_compute_layer_0_0_0_s_fu_42_ap_return_2;
    sc_signal< sc_lv<32> > grp_compute_layer_0_0_0_s_fu_42_ap_return_3;
    sc_signal< sc_lv<32> > grp_compute_layer_0_0_0_s_fu_42_ap_return_4;
    sc_signal< sc_lv<32> > grp_compute_layer_0_0_0_s_fu_42_ap_return_5;
    sc_signal< sc_logic > grp_compute_layer_0_0_0_s_fu_42_ap_ce;
    sc_signal< sc_logic > grp_softmax_fu_58_ap_start;
    sc_signal< sc_logic > grp_softmax_fu_58_ap_done;
    sc_signal< sc_logic > grp_softmax_fu_58_ap_idle;
    sc_signal< sc_logic > grp_softmax_fu_58_ap_ready;
    sc_signal< sc_logic > grp_softmax_fu_58_ap_ce;
    sc_signal< sc_lv<189> > grp_softmax_fu_58_ap_return;
    sc_signal< sc_logic > call_ret2_relu_fu_72_ap_ready;
    sc_signal< sc_lv<32> > call_ret2_relu_fu_72_ap_return_0;
    sc_signal< sc_lv<32> > call_ret2_relu_fu_72_ap_return_1;
    sc_signal< sc_lv<32> > call_ret2_relu_fu_72_ap_return_2;
    sc_signal< sc_lv<32> > call_ret2_relu_fu_72_ap_return_3;
    sc_signal< sc_lv<32> > call_ret2_relu_fu_72_ap_return_4;
    sc_signal< sc_lv<32> > call_ret2_relu_fu_72_ap_return_5;
    sc_signal< sc_lv<32> > call_ret2_relu_fu_72_ap_return_6;
    sc_signal< sc_lv<32> > call_ret2_relu_fu_72_ap_return_7;
    sc_signal< sc_lv<32> > call_ret2_relu_fu_72_ap_return_8;
    sc_signal< sc_lv<32> > call_ret2_relu_fu_72_ap_return_9;
    sc_signal< sc_lv<32> > call_ret2_relu_fu_72_ap_return_10;
    sc_signal< sc_lv<32> > call_ret2_relu_fu_72_ap_return_11;
    sc_signal< sc_logic > grp_softmax_fu_58_ap_start_reg;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to13;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state10_pp0_stage0_iter9();
    void thread_ap_block_state11_pp0_stage0_iter10();
    void thread_ap_block_state12_pp0_stage0_iter11();
    void thread_ap_block_state13_pp0_stage0_iter12();
    void thread_ap_block_state14_pp0_stage0_iter13();
    void thread_ap_block_state15_pp0_stage0_iter14();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_block_state4_pp0_stage0_iter3();
    void thread_ap_block_state5_pp0_stage0_iter4();
    void thread_ap_block_state6_pp0_stage0_iter5();
    void thread_ap_block_state7_pp0_stage0_iter6();
    void thread_ap_block_state8_pp0_stage0_iter7();
    void thread_ap_block_state9_pp0_stage0_iter8();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to13();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_ap_return();
    void thread_data_V_blk_n();
    void thread_grp_compute_layer_0_0_0_s_fu_42_ap_ce();
    void thread_grp_conv_1d_0_0_0_0_fu_36_ap_ce();
    void thread_grp_softmax_fu_58_ap_ce();
    void thread_grp_softmax_fu_58_ap_start();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
