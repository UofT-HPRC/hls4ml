-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_V_ap_vld : IN STD_LOGIC;
    data_V : IN STD_LOGIC_VECTOR (767 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (188 downto 0);
    data_V_blk_n : OUT STD_LOGIC );
end;


architecture behav of myproject is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal logits2_0_V_reg_297 : STD_LOGIC_VECTOR (31 downto 0);
    signal logits2_1_V_reg_302 : STD_LOGIC_VECTOR (31 downto 0);
    signal logits2_2_V_reg_307 : STD_LOGIC_VECTOR (31 downto 0);
    signal logits2_3_V_reg_312 : STD_LOGIC_VECTOR (31 downto 0);
    signal logits2_4_V_reg_317 : STD_LOGIC_VECTOR (31 downto 0);
    signal logits2_5_V_reg_322 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal grp_conv_1d_0_0_0_0_fu_36_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_1d_0_0_0_0_fu_36_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_1d_0_0_0_0_fu_36_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_1d_0_0_0_0_fu_36_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_1d_0_0_0_0_fu_36_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_1d_0_0_0_0_fu_36_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_1d_0_0_0_0_fu_36_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_1d_0_0_0_0_fu_36_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_1d_0_0_0_0_fu_36_ap_return_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_1d_0_0_0_0_fu_36_ap_return_9 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_1d_0_0_0_0_fu_36_ap_return_10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_1d_0_0_0_0_fu_36_ap_return_11 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_1d_0_0_0_0_fu_36_ap_ce : STD_LOGIC;
    signal grp_compute_layer_0_0_0_s_fu_42_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_42_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_42_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_42_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_42_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_42_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_42_ap_ce : STD_LOGIC;
    signal grp_softmax_fu_58_ap_start : STD_LOGIC;
    signal grp_softmax_fu_58_ap_done : STD_LOGIC;
    signal grp_softmax_fu_58_ap_idle : STD_LOGIC;
    signal grp_softmax_fu_58_ap_ready : STD_LOGIC;
    signal grp_softmax_fu_58_ap_ce : STD_LOGIC;
    signal grp_softmax_fu_58_ap_return : STD_LOGIC_VECTOR (188 downto 0);
    signal call_ret2_relu_fu_72_ap_ready : STD_LOGIC;
    signal call_ret2_relu_fu_72_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret2_relu_fu_72_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret2_relu_fu_72_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret2_relu_fu_72_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret2_relu_fu_72_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret2_relu_fu_72_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret2_relu_fu_72_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret2_relu_fu_72_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret2_relu_fu_72_ap_return_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret2_relu_fu_72_ap_return_9 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret2_relu_fu_72_ap_return_10 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret2_relu_fu_72_ap_return_11 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_softmax_fu_58_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to13 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component conv_1d_0_0_0_0 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_V_read : IN STD_LOGIC_VECTOR (767 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component compute_layer_0_0_0_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_6_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_8_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_9_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_10_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_11_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component softmax IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (188 downto 0) );
    end component;


    component relu IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_6_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_8_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_9_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_10_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_11_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_conv_1d_0_0_0_0_fu_36 : component conv_1d_0_0_0_0
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_V_read => data_V,
        ap_return_0 => grp_conv_1d_0_0_0_0_fu_36_ap_return_0,
        ap_return_1 => grp_conv_1d_0_0_0_0_fu_36_ap_return_1,
        ap_return_2 => grp_conv_1d_0_0_0_0_fu_36_ap_return_2,
        ap_return_3 => grp_conv_1d_0_0_0_0_fu_36_ap_return_3,
        ap_return_4 => grp_conv_1d_0_0_0_0_fu_36_ap_return_4,
        ap_return_5 => grp_conv_1d_0_0_0_0_fu_36_ap_return_5,
        ap_return_6 => grp_conv_1d_0_0_0_0_fu_36_ap_return_6,
        ap_return_7 => grp_conv_1d_0_0_0_0_fu_36_ap_return_7,
        ap_return_8 => grp_conv_1d_0_0_0_0_fu_36_ap_return_8,
        ap_return_9 => grp_conv_1d_0_0_0_0_fu_36_ap_return_9,
        ap_return_10 => grp_conv_1d_0_0_0_0_fu_36_ap_return_10,
        ap_return_11 => grp_conv_1d_0_0_0_0_fu_36_ap_return_11,
        ap_ce => grp_conv_1d_0_0_0_0_fu_36_ap_ce);

    grp_compute_layer_0_0_0_s_fu_42 : component compute_layer_0_0_0_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_0_V_read => call_ret2_relu_fu_72_ap_return_0,
        data_1_V_read => call_ret2_relu_fu_72_ap_return_1,
        data_2_V_read => call_ret2_relu_fu_72_ap_return_2,
        data_3_V_read => call_ret2_relu_fu_72_ap_return_3,
        data_4_V_read => call_ret2_relu_fu_72_ap_return_4,
        data_5_V_read => call_ret2_relu_fu_72_ap_return_5,
        data_6_V_read => call_ret2_relu_fu_72_ap_return_6,
        data_7_V_read => call_ret2_relu_fu_72_ap_return_7,
        data_8_V_read => call_ret2_relu_fu_72_ap_return_8,
        data_9_V_read => call_ret2_relu_fu_72_ap_return_9,
        data_10_V_read => call_ret2_relu_fu_72_ap_return_10,
        data_11_V_read => call_ret2_relu_fu_72_ap_return_11,
        ap_return_0 => grp_compute_layer_0_0_0_s_fu_42_ap_return_0,
        ap_return_1 => grp_compute_layer_0_0_0_s_fu_42_ap_return_1,
        ap_return_2 => grp_compute_layer_0_0_0_s_fu_42_ap_return_2,
        ap_return_3 => grp_compute_layer_0_0_0_s_fu_42_ap_return_3,
        ap_return_4 => grp_compute_layer_0_0_0_s_fu_42_ap_return_4,
        ap_return_5 => grp_compute_layer_0_0_0_s_fu_42_ap_return_5,
        ap_ce => grp_compute_layer_0_0_0_s_fu_42_ap_ce);

    grp_softmax_fu_58 : component softmax
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_softmax_fu_58_ap_start,
        ap_done => grp_softmax_fu_58_ap_done,
        ap_idle => grp_softmax_fu_58_ap_idle,
        ap_ready => grp_softmax_fu_58_ap_ready,
        ap_ce => grp_softmax_fu_58_ap_ce,
        data_0_V_read => logits2_0_V_reg_297,
        data_1_V_read => logits2_1_V_reg_302,
        data_2_V_read => logits2_2_V_reg_307,
        data_3_V_read => logits2_3_V_reg_312,
        data_4_V_read => logits2_4_V_reg_317,
        data_5_V_read => logits2_5_V_reg_322,
        ap_return => grp_softmax_fu_58_ap_return);

    call_ret2_relu_fu_72 : component relu
    port map (
        ap_ready => call_ret2_relu_fu_72_ap_ready,
        data_0_V_read => grp_conv_1d_0_0_0_0_fu_36_ap_return_0,
        data_1_V_read => grp_conv_1d_0_0_0_0_fu_36_ap_return_1,
        data_2_V_read => grp_conv_1d_0_0_0_0_fu_36_ap_return_2,
        data_3_V_read => grp_conv_1d_0_0_0_0_fu_36_ap_return_3,
        data_4_V_read => grp_conv_1d_0_0_0_0_fu_36_ap_return_4,
        data_5_V_read => grp_conv_1d_0_0_0_0_fu_36_ap_return_5,
        data_6_V_read => grp_conv_1d_0_0_0_0_fu_36_ap_return_6,
        data_7_V_read => grp_conv_1d_0_0_0_0_fu_36_ap_return_7,
        data_8_V_read => grp_conv_1d_0_0_0_0_fu_36_ap_return_8,
        data_9_V_read => grp_conv_1d_0_0_0_0_fu_36_ap_return_9,
        data_10_V_read => grp_conv_1d_0_0_0_0_fu_36_ap_return_10,
        data_11_V_read => grp_conv_1d_0_0_0_0_fu_36_ap_return_11,
        ap_return_0 => call_ret2_relu_fu_72_ap_return_0,
        ap_return_1 => call_ret2_relu_fu_72_ap_return_1,
        ap_return_2 => call_ret2_relu_fu_72_ap_return_2,
        ap_return_3 => call_ret2_relu_fu_72_ap_return_3,
        ap_return_4 => call_ret2_relu_fu_72_ap_return_4,
        ap_return_5 => call_ret2_relu_fu_72_ap_return_5,
        ap_return_6 => call_ret2_relu_fu_72_ap_return_6,
        ap_return_7 => call_ret2_relu_fu_72_ap_return_7,
        ap_return_8 => call_ret2_relu_fu_72_ap_return_8,
        ap_return_9 => call_ret2_relu_fu_72_ap_return_9,
        ap_return_10 => call_ret2_relu_fu_72_ap_return_10,
        ap_return_11 => call_ret2_relu_fu_72_ap_return_11);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    grp_softmax_fu_58_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_softmax_fu_58_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
                    grp_softmax_fu_58_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_softmax_fu_58_ap_ready = ap_const_logic_1)) then 
                    grp_softmax_fu_58_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                logits2_0_V_reg_297 <= grp_compute_layer_0_0_0_s_fu_42_ap_return_0;
                logits2_1_V_reg_302 <= grp_compute_layer_0_0_0_s_fu_42_ap_return_1;
                logits2_2_V_reg_307 <= grp_compute_layer_0_0_0_s_fu_42_ap_return_2;
                logits2_3_V_reg_312 <= grp_compute_layer_0_0_0_s_fu_42_ap_return_3;
                logits2_4_V_reg_317 <= grp_compute_layer_0_0_0_s_fu_42_ap_return_4;
                logits2_5_V_reg_322 <= grp_compute_layer_0_0_0_s_fu_42_ap_return_5;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, data_V_ap_vld)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_1) and ((data_V_ap_vld = ap_const_logic_0) or (ap_start = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, data_V_ap_vld)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_1) and ((data_V_ap_vld = ap_const_logic_0) or (ap_start = ap_const_logic_0)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, data_V_ap_vld)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((data_V_ap_vld = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1)) or ((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to13_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to13 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to13)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to13 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= grp_softmax_fu_58_ap_return;

    data_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, data_V_ap_vld)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_blk_n <= data_V_ap_vld;
        else 
            data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    grp_compute_layer_0_0_0_s_fu_42_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_compute_layer_0_0_0_s_fu_42_ap_ce <= ap_const_logic_1;
        else 
            grp_compute_layer_0_0_0_s_fu_42_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_conv_1d_0_0_0_0_fu_36_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_conv_1d_0_0_0_0_fu_36_ap_ce <= ap_const_logic_1;
        else 
            grp_conv_1d_0_0_0_0_fu_36_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_softmax_fu_58_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_softmax_fu_58_ap_ce <= ap_const_logic_1;
        else 
            grp_softmax_fu_58_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_softmax_fu_58_ap_start <= grp_softmax_fu_58_ap_start_reg;
end behav;
