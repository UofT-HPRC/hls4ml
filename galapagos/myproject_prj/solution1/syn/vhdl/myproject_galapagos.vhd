-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_galapagos is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_V_data_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    in_V_data_V_empty_n : IN STD_LOGIC;
    in_V_data_V_read : OUT STD_LOGIC;
    in_V_dest_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_V_dest_V_empty_n : IN STD_LOGIC;
    in_V_dest_V_read : OUT STD_LOGIC;
    in_V_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    in_V_last_V_empty_n : IN STD_LOGIC;
    in_V_last_V_read : OUT STD_LOGIC;
    in_V_id_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_V_id_V_empty_n : IN STD_LOGIC;
    in_V_id_V_read : OUT STD_LOGIC;
    in_V_user_V_dout : IN STD_LOGIC_VECTOR (39 downto 0);
    in_V_user_V_empty_n : IN STD_LOGIC;
    in_V_user_V_read : OUT STD_LOGIC;
    in_V_keep_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_V_keep_V_empty_n : IN STD_LOGIC;
    in_V_keep_V_read : OUT STD_LOGIC;
    out_V_data_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_V_data_V_full_n : IN STD_LOGIC;
    out_V_data_V_write : OUT STD_LOGIC;
    out_V_dest_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_V_dest_V_full_n : IN STD_LOGIC;
    out_V_dest_V_write : OUT STD_LOGIC;
    out_V_last_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_V_last_V_full_n : IN STD_LOGIC;
    out_V_last_V_write : OUT STD_LOGIC;
    out_V_id_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_V_id_V_full_n : IN STD_LOGIC;
    out_V_id_V_write : OUT STD_LOGIC;
    out_V_user_V_din : OUT STD_LOGIC_VECTOR (39 downto 0);
    out_V_user_V_full_n : IN STD_LOGIC;
    out_V_user_V_write : OUT STD_LOGIC;
    out_V_keep_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_V_keep_V_full_n : IN STD_LOGIC;
    out_V_keep_V_write : OUT STD_LOGIC );
end;


architecture behav of myproject_galapagos is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject_galapagos,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcku115-flva1517-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.312000,HLS_SYN_LAT=115,HLS_SYN_TPT=none,HLS_SYN_MEM=18,HLS_SYN_DSP=792,HLS_SYN_FF=44641,HLS_SYN_LUT=43343,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv10_2FF : STD_LOGIC_VECTOR (9 downto 0) := "1011111111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_1F : STD_LOGIC_VECTOR (6 downto 0) := "0011111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv10_7F : STD_LOGIC_VECTOR (9 downto 0) := "0001111111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_2FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011111111";
    constant ap_const_lv768_lc_2 : STD_LOGIC_VECTOR (767 downto
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv128_lc_3 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv8_1F : STD_LOGIC_VECTOR (7 downto 0) := "00011111";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv8_BF : STD_LOGIC_VECTOR (7 downto 0) := "10111111";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv192_lc_4 : STD_LOGIC_VECTOR (191 downto 0) := "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in_V_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal in_V_dest_V_blk_n : STD_LOGIC;
    signal in_V_last_V_blk_n : STD_LOGIC;
    signal in_V_id_V_blk_n : STD_LOGIC;
    signal in_V_user_V_blk_n : STD_LOGIC;
    signal in_V_keep_V_blk_n : STD_LOGIC;
    signal out_V_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal out_V_dest_V_blk_n : STD_LOGIC;
    signal out_V_last_V_blk_n : STD_LOGIC;
    signal out_V_id_V_blk_n : STD_LOGIC;
    signal out_V_user_V_blk_n : STD_LOGIC;
    signal out_V_keep_V_blk_n : STD_LOGIC;
    signal i_1_fu_240_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_866 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_s_fu_250_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_reg_871 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond1_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_79_fu_258_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_79_reg_877 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_fu_270_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_reg_886 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_82_fu_276_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_82_reg_891 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond2_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_83_fu_286_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_83_reg_901 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_286_reg_908 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_229_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_289_reg_914 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_294_fu_313_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_294_reg_919 : STD_LOGIC_VECTOR (9 downto 0);
    signal in_V_id_V0_status : STD_LOGIC;
    signal tmp_321_fu_523_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_321_reg_929 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_322_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_str_ext_fu_650_p1 : STD_LOGIC_VECTOR (191 downto 0);
    signal res_str_ext_reg_942 : STD_LOGIC_VECTOR (191 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal i_2_fu_660_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_951 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal tmp_277_fu_736_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_277_reg_956 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_280_fu_746_p2 : STD_LOGIC_VECTOR (191 downto 0);
    signal tmp_280_reg_961 : STD_LOGIC_VECTOR (191 downto 0);
    signal gp_last_V_fu_752_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gp_last_V_reg_966 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_6_fu_814_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_6_reg_971 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_myproject_fu_216_ap_start : STD_LOGIC;
    signal grp_myproject_fu_216_ap_done : STD_LOGIC;
    signal grp_myproject_fu_216_ap_idle : STD_LOGIC;
    signal grp_myproject_fu_216_ap_ready : STD_LOGIC;
    signal grp_myproject_fu_216_ap_return : STD_LOGIC_VECTOR (188 downto 0);
    signal grp_myproject_fu_216_data_V_blk_n : STD_LOGIC;
    signal i_reg_183 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_194 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i5_reg_205 : STD_LOGIC_VECTOR (2 downto 0);
    signal out_V_id_V1_status : STD_LOGIC;
    signal grp_myproject_fu_216_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_NS_fsm_state6 : STD_LOGIC;
    signal data_str_V_fu_140 : STD_LOGIC_VECTOR (767 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal in_V_id_V0_update : STD_LOGIC;
    signal out_V_id_V1_update : STD_LOGIC;
    signal tmp_id_V_fu_128 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_fu_132 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_keep_V_fu_136 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_str_V_1_fu_639_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal grp_fu_225_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_225_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_229_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_246_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_288_fu_293_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_290_fu_299_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_291_fu_305_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_285_fu_335_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_287_fu_350_p4 : STD_LOGIC_VECTOR (767 downto 0);
    signal tmp_293_fu_367_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_292_fu_360_p3 : STD_LOGIC_VECTOR (767 downto 0);
    signal tmp_295_fu_372_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal tmp_296_fu_376_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal tmp_297_fu_379_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal tmp_298_fu_385_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal tmp_299_fu_391_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal tmp_4_fu_339_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_302_fu_405_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_301_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_303_fu_408_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_305_fu_415_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_306_fu_421_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_308_fu_437_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_307_fu_429_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_309_fu_445_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_304_fu_411_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_310_fu_451_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_313_fu_463_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_314_fu_469_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_311_fu_455_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_312_fu_459_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_316_fu_487_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_317_fu_493_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_demorgan_fu_499_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_300_fu_397_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_318_fu_505_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_315_fu_479_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_319_fu_511_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_320_fu_517_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_325_fu_547_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_327_fu_557_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_326_fu_552_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_328_fu_563_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_323_fu_544_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal tmp_329_fu_569_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal tmp_332_fu_581_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal tmp_333_fu_587_p4 : STD_LOGIC_VECTOR (767 downto 0);
    signal tmp_330_fu_573_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal tmp_331_fu_577_p1 : STD_LOGIC_VECTOR (767 downto 0);
    signal tmp_335_fu_604_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal tmp_336_fu_610_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal p_demorgan1_fu_616_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal tmp_337_fu_622_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal tmp_334_fu_597_p3 : STD_LOGIC_VECTOR (767 downto 0);
    signal tmp_338_fu_628_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal tmp_339_fu_633_p2 : STD_LOGIC_VECTOR (767 downto 0);
    signal tmp_80_fu_666_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_81_fu_674_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_269_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_271_fu_695_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_273_fu_707_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_270_fu_686_p4 : STD_LOGIC_VECTOR (191 downto 0);
    signal tmp_272_fu_701_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_274_fu_713_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_276_fu_728_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_275_fu_721_p3 : STD_LOGIC_VECTOR (191 downto 0);
    signal tmp_278_fu_742_p1 : STD_LOGIC_VECTOR (191 downto 0);
    signal tmp_279_fu_758_p1 : STD_LOGIC_VECTOR (191 downto 0);
    signal tmp_281_fu_761_p2 : STD_LOGIC_VECTOR (191 downto 0);
    signal tmp_282_fu_767_p2 : STD_LOGIC_VECTOR (191 downto 0);
    signal tmp_284_fu_790_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal ret_V_fu_772_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_794_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_1_fu_800_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_283_fu_782_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_fu_806_p3 : STD_LOGIC_VECTOR (7 downto 0);

    component myproject IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_V_ap_vld : IN STD_LOGIC;
        data_V : IN STD_LOGIC_VECTOR (767 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (188 downto 0);
        data_V_blk_n : OUT STD_LOGIC );
    end component;



begin
    grp_myproject_fu_216 : component myproject
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_myproject_fu_216_ap_start,
        ap_done => grp_myproject_fu_216_ap_done,
        ap_idle => grp_myproject_fu_216_ap_idle,
        ap_ready => grp_myproject_fu_216_ap_ready,
        data_V_ap_vld => ap_const_logic_1,
        data_V => data_str_V_fu_140,
        ap_return => grp_myproject_fu_216_ap_return,
        data_V_blk_n => grp_myproject_fu_216_data_V_blk_n);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_myproject_fu_216_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_myproject_fu_216_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state6) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_myproject_fu_216_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_myproject_fu_216_ap_ready = ap_const_logic_1)) then 
                    grp_myproject_fu_216_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i5_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((out_V_id_V1_status = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                i5_reg_205 <= i_2_reg_951;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                i5_reg_205 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_264_p2 = ap_const_lv1_1))) then 
                i_reg_183 <= i_1_reg_866;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_183 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_234_p2 = ap_const_lv1_0))) then 
                j_reg_194 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_reg_194 <= j_1_reg_886;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                data_str_V_fu_140 <= data_str_V_1_fu_639_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond_fu_654_p2 = ap_const_lv1_0))) then
                gp_last_V_reg_966 <= gp_last_V_fu_752_p2;
                    tmp_277_reg_956(7 downto 1) <= tmp_277_fu_736_p2(7 downto 1);
                tmp_280_reg_961 <= tmp_280_fu_746_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_866 <= i_1_fu_240_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                i_2_reg_951 <= i_2_fu_660_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_1_reg_886 <= j_1_fu_270_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                p_6_reg_971 <= p_6_fu_814_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                    res_str_ext_reg_942(188 downto 0) <= res_str_ext_fu_650_p1(188 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_264_p2 = ap_const_lv1_0))) then
                tmp_286_reg_908 <= grp_fu_225_p2;
                tmp_289_reg_914 <= grp_fu_229_p2;
                    tmp_294_reg_919(9 downto 1) <= tmp_294_fu_313_p2(9 downto 1);
                    tmp_82_reg_891(9 downto 7) <= tmp_82_fu_276_p3(9 downto 7);
                    tmp_83_reg_901(9 downto 7) <= tmp_83_fu_286_p2(9 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (in_V_id_V0_status = ap_const_logic_1))) then
                tmp_321_reg_929 <= tmp_321_fu_523_p2;
                tmp_322_reg_934 <= grp_fu_225_p2;
                tmp_id_V_fu_128 <= in_V_id_V_dout;
                tmp_keep_V_fu_136 <= in_V_keep_V_dout;
                tmp_user_V_fu_132 <= in_V_user_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_234_p2 = ap_const_lv1_0))) then
                    tmp_79_reg_877(6 downto 5) <= tmp_79_fu_258_p2(6 downto 5);
                    tmp_s_reg_871(6 downto 5) <= tmp_s_fu_250_p3(6 downto 5);
            end if;
        end if;
    end process;
    tmp_s_reg_871(4 downto 0) <= "00000";
    tmp_79_reg_877(4 downto 0) <= "11111";
    tmp_82_reg_891(6 downto 0) <= "0000000";
    tmp_83_reg_901(6 downto 0) <= "1111111";
    tmp_294_reg_919(0) <= '0';
    res_str_ext_reg_942(191 downto 189) <= "000";
    tmp_277_reg_956(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state23, ap_CS_fsm_state2, exitcond1_fu_234_p2, ap_CS_fsm_state3, exitcond2_fu_264_p2, in_V_id_V0_status, ap_CS_fsm_state21, exitcond_fu_654_p2, out_V_id_V1_status)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_234_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_264_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (in_V_id_V0_status = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond_fu_654_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((out_V_id_V1_status = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_NS_fsm_state6 <= ap_NS_fsm(5);

    ap_done_assign_proc : process(ap_CS_fsm_state21, exitcond_fu_654_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond_fu_654_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state21, exitcond_fu_654_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond_fu_654_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    data_str_V_1_fu_639_p2 <= (tmp_339_fu_633_p2 or tmp_338_fu_628_p2);
    exitcond1_fu_234_p2 <= "1" when (i_reg_183 = ap_const_lv3_4) else "0";
    exitcond2_fu_264_p2 <= "1" when (j_reg_194 = ap_const_lv3_6) else "0";
    exitcond_fu_654_p2 <= "1" when (i5_reg_205 = ap_const_lv3_6) else "0";
    gp_last_V_fu_752_p2 <= "1" when (i5_reg_205 = ap_const_lv3_5) else "0";

    grp_fu_225_p0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3, tmp_82_fu_276_p3, tmp_82_reg_891)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_225_p0 <= tmp_82_reg_891;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_225_p0 <= tmp_82_fu_276_p3;
        else 
            grp_fu_225_p0 <= "XXXXXXXXXX";
        end if; 
    end process;


    grp_fu_225_p1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3, tmp_83_fu_286_p2, tmp_83_reg_901)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_225_p1 <= tmp_83_reg_901;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_225_p1 <= tmp_83_fu_286_p2;
        else 
            grp_fu_225_p1 <= "XXXXXXXXXX";
        end if; 
    end process;

    grp_fu_225_p2 <= "1" when (unsigned(grp_fu_225_p0) > unsigned(grp_fu_225_p1)) else "0";

    grp_fu_229_p1_assign_proc : process(ap_CS_fsm_state3, tmp_82_fu_276_p3, tmp_82_reg_891, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_229_p1 <= tmp_82_reg_891;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_229_p1 <= tmp_82_fu_276_p3;
        else 
            grp_fu_229_p1 <= "XXXXXXXXXX";
        end if; 
    end process;

    grp_fu_229_p2 <= std_logic_vector(signed(ap_const_lv10_2FF) - signed(grp_fu_229_p1));
    grp_myproject_fu_216_ap_start <= grp_myproject_fu_216_ap_start_reg;
    i_1_fu_240_p2 <= std_logic_vector(unsigned(i_reg_183) + unsigned(ap_const_lv3_1));
    i_2_fu_660_p2 <= std_logic_vector(unsigned(i5_reg_205) + unsigned(ap_const_lv3_1));

    in_V_data_V_blk_n_assign_proc : process(in_V_data_V_empty_n, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_V_data_V_blk_n <= in_V_data_V_empty_n;
        else 
            in_V_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_V_data_V_read <= in_V_id_V0_update;

    in_V_dest_V_blk_n_assign_proc : process(in_V_dest_V_empty_n, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_V_dest_V_blk_n <= in_V_dest_V_empty_n;
        else 
            in_V_dest_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_V_dest_V_read <= in_V_id_V0_update;
    in_V_id_V0_status <= (in_V_user_V_empty_n and in_V_last_V_empty_n and in_V_keep_V_empty_n and in_V_id_V_empty_n and in_V_dest_V_empty_n and in_V_data_V_empty_n);

    in_V_id_V0_update_assign_proc : process(ap_CS_fsm_state4, in_V_id_V0_status)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (in_V_id_V0_status = ap_const_logic_1))) then 
            in_V_id_V0_update <= ap_const_logic_1;
        else 
            in_V_id_V0_update <= ap_const_logic_0;
        end if; 
    end process;


    in_V_id_V_blk_n_assign_proc : process(in_V_id_V_empty_n, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_V_id_V_blk_n <= in_V_id_V_empty_n;
        else 
            in_V_id_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_V_id_V_read <= in_V_id_V0_update;

    in_V_keep_V_blk_n_assign_proc : process(in_V_keep_V_empty_n, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_V_keep_V_blk_n <= in_V_keep_V_empty_n;
        else 
            in_V_keep_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_V_keep_V_read <= in_V_id_V0_update;

    in_V_last_V_blk_n_assign_proc : process(in_V_last_V_empty_n, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_V_last_V_blk_n <= in_V_last_V_empty_n;
        else 
            in_V_last_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_V_last_V_read <= in_V_id_V0_update;

    in_V_user_V_blk_n_assign_proc : process(in_V_user_V_empty_n, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_V_user_V_blk_n <= in_V_user_V_empty_n;
        else 
            in_V_user_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_V_user_V_read <= in_V_id_V0_update;
    j_1_fu_270_p2 <= std_logic_vector(unsigned(j_reg_194) + unsigned(ap_const_lv3_1));

    out_V_data_V_blk_n_assign_proc : process(out_V_data_V_full_n, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            out_V_data_V_blk_n <= out_V_data_V_full_n;
        else 
            out_V_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        out_V_data_V_din <= std_logic_vector(IEEE.numeric_std.resize(signed(p_6_reg_971),64));

    out_V_data_V_write <= out_V_id_V1_update;

    out_V_dest_V_blk_n_assign_proc : process(out_V_dest_V_full_n, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            out_V_dest_V_blk_n <= out_V_dest_V_full_n;
        else 
            out_V_dest_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_dest_V_din <= ap_const_lv8_0;
    out_V_dest_V_write <= out_V_id_V1_update;
    out_V_id_V1_status <= (out_V_user_V_full_n and out_V_last_V_full_n and out_V_keep_V_full_n and out_V_id_V_full_n and out_V_dest_V_full_n and out_V_data_V_full_n);

    out_V_id_V1_update_assign_proc : process(ap_CS_fsm_state23, out_V_id_V1_status)
    begin
        if (((out_V_id_V1_status = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            out_V_id_V1_update <= ap_const_logic_1;
        else 
            out_V_id_V1_update <= ap_const_logic_0;
        end if; 
    end process;


    out_V_id_V_blk_n_assign_proc : process(out_V_id_V_full_n, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            out_V_id_V_blk_n <= out_V_id_V_full_n;
        else 
            out_V_id_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_id_V_din <= tmp_id_V_fu_128;
    out_V_id_V_write <= out_V_id_V1_update;

    out_V_keep_V_blk_n_assign_proc : process(out_V_keep_V_full_n, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            out_V_keep_V_blk_n <= out_V_keep_V_full_n;
        else 
            out_V_keep_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_keep_V_din <= tmp_keep_V_fu_136;
    out_V_keep_V_write <= out_V_id_V1_update;

    out_V_last_V_blk_n_assign_proc : process(out_V_last_V_full_n, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            out_V_last_V_blk_n <= out_V_last_V_full_n;
        else 
            out_V_last_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_last_V_din <= gp_last_V_reg_966;
    out_V_last_V_write <= out_V_id_V1_update;

    out_V_user_V_blk_n_assign_proc : process(out_V_user_V_full_n, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            out_V_user_V_blk_n <= out_V_user_V_full_n;
        else 
            out_V_user_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_user_V_din <= tmp_user_V_fu_132;
    out_V_user_V_write <= out_V_id_V1_update;
    p_6_fu_814_p3 <= 
        p_s_fu_806_p3 when (tmp_283_fu_782_p3(0) = '1') else 
        ret_V_fu_772_p4;
    p_demorgan1_fu_616_p2 <= (tmp_336_fu_610_p2 and tmp_335_fu_604_p2);
    p_demorgan_fu_499_p2 <= (tmp_317_fu_493_p2 and tmp_316_fu_487_p2);
    p_s_fu_806_p3 <= 
        ret_V_fu_772_p4 when (tmp_5_fu_794_p2(0) = '1') else 
        ret_V_1_fu_800_p2;
    res_str_ext_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_myproject_fu_216_ap_return),192));
    ret_V_1_fu_800_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(ret_V_fu_772_p4));
    ret_V_fu_772_p4 <= tmp_282_fu_767_p2(31 downto 24);
    tmp_269_fu_680_p2 <= "1" when (unsigned(tmp_80_fu_666_p3) > unsigned(tmp_81_fu_674_p2)) else "0";
    
    tmp_270_fu_686_p4_proc : process(res_str_ext_reg_942)
    variable vlo_cpy : STD_LOGIC_VECTOR(192+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(192+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(192 - 1 downto 0);
    variable tmp_270_fu_686_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(192 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(192 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(192 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(8 - 1 downto 0) := ap_const_lv32_BF(8 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(8 - 1 downto 0) := ap_const_lv32_0(8 - 1 downto 0);
        v0_cpy := res_str_ext_reg_942;
        if (vlo_cpy(8 - 1 downto 0) > vhi_cpy(8 - 1 downto 0)) then
            vhi_cpy(8-1 downto 0) := std_logic_vector(192-1-unsigned(ap_const_lv32_0(8-1 downto 0)));
            vlo_cpy(8-1 downto 0) := std_logic_vector(192-1-unsigned(ap_const_lv32_BF(8-1 downto 0)));
            for tmp_270_fu_686_p4_i in 0 to 192-1 loop
                v0_cpy(tmp_270_fu_686_p4_i) := res_str_ext_reg_942(192-1-tmp_270_fu_686_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(8-1 downto 0)))));

        section := (others=>'0');
        section(8-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(8-1 downto 0)) - unsigned(vlo_cpy(8-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(192-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_270_fu_686_p4 <= resvalue(192-1 downto 0);
    end process;

    tmp_271_fu_695_p2 <= std_logic_vector(unsigned(tmp_80_fu_666_p3) - unsigned(tmp_81_fu_674_p2));
    tmp_272_fu_701_p2 <= std_logic_vector(signed(ap_const_lv8_BF) - signed(tmp_80_fu_666_p3));
    tmp_273_fu_707_p2 <= std_logic_vector(unsigned(tmp_81_fu_674_p2) - unsigned(tmp_80_fu_666_p3));
    tmp_274_fu_713_p3 <= 
        tmp_271_fu_695_p2 when (tmp_269_fu_680_p2(0) = '1') else 
        tmp_273_fu_707_p2;
    tmp_275_fu_721_p3 <= 
        tmp_270_fu_686_p4 when (tmp_269_fu_680_p2(0) = '1') else 
        res_str_ext_reg_942;
    tmp_276_fu_728_p3 <= 
        tmp_272_fu_701_p2 when (tmp_269_fu_680_p2(0) = '1') else 
        tmp_80_fu_666_p3;
    tmp_277_fu_736_p2 <= std_logic_vector(signed(ap_const_lv8_BF) - signed(tmp_274_fu_713_p3));
    tmp_278_fu_742_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_276_fu_728_p3),192));
    tmp_279_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_277_reg_956),192));
    tmp_280_fu_746_p2 <= std_logic_vector(shift_right(unsigned(tmp_275_fu_721_p3),to_integer(unsigned('0' & tmp_278_fu_742_p1(31-1 downto 0)))));
    tmp_281_fu_761_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv192_lc_4),to_integer(unsigned('0' & tmp_279_fu_758_p1(31-1 downto 0)))));
    tmp_282_fu_767_p2 <= (tmp_281_fu_761_p2 and tmp_280_reg_961);
    tmp_283_fu_782_p3 <= tmp_282_fu_767_p2(31 downto 31);
    tmp_284_fu_790_p1 <= tmp_282_fu_767_p2(24 - 1 downto 0);
    tmp_285_fu_335_p1 <= in_V_data_V_dout(8 - 1 downto 0);
    
    tmp_287_fu_350_p4_proc : process(data_str_V_fu_140)
    variable vlo_cpy : STD_LOGIC_VECTOR(768+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(768+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(768 - 1 downto 0);
    variable tmp_287_fu_350_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(768 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(768 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(768 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(10 - 1 downto 0) := ap_const_lv32_2FF(10 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(10 - 1 downto 0) := ap_const_lv32_0(10 - 1 downto 0);
        v0_cpy := data_str_V_fu_140;
        if (vlo_cpy(10 - 1 downto 0) > vhi_cpy(10 - 1 downto 0)) then
            vhi_cpy(10-1 downto 0) := std_logic_vector(768-1-unsigned(ap_const_lv32_0(10-1 downto 0)));
            vlo_cpy(10-1 downto 0) := std_logic_vector(768-1-unsigned(ap_const_lv32_2FF(10-1 downto 0)));
            for tmp_287_fu_350_p4_i in 0 to 768-1 loop
                v0_cpy(tmp_287_fu_350_p4_i) := data_str_V_fu_140(768-1-tmp_287_fu_350_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(10-1 downto 0)))));

        section := (others=>'0');
        section(10-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(10-1 downto 0)) - unsigned(vlo_cpy(10-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(768-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_287_fu_350_p4 <= resvalue(768-1 downto 0);
    end process;

    tmp_288_fu_293_p2 <= std_logic_vector(unsigned(tmp_82_fu_276_p3) - unsigned(tmp_83_fu_286_p2));
    tmp_290_fu_299_p2 <= std_logic_vector(unsigned(tmp_83_fu_286_p2) - unsigned(tmp_82_fu_276_p3));
    tmp_291_fu_305_p3 <= 
        tmp_288_fu_293_p2 when (grp_fu_225_p2(0) = '1') else 
        tmp_290_fu_299_p2;
    tmp_292_fu_360_p3 <= 
        tmp_287_fu_350_p4 when (tmp_286_reg_908(0) = '1') else 
        data_str_V_fu_140;
    tmp_293_fu_367_p3 <= 
        tmp_289_reg_914 when (tmp_286_reg_908(0) = '1') else 
        tmp_82_reg_891;
    tmp_294_fu_313_p2 <= std_logic_vector(signed(ap_const_lv10_2FF) - signed(tmp_291_fu_305_p3));
    tmp_295_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_293_fu_367_p3),768));
    tmp_296_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_294_reg_919),768));
    tmp_297_fu_379_p2 <= std_logic_vector(shift_right(unsigned(tmp_292_fu_360_p3),to_integer(unsigned('0' & tmp_295_fu_372_p1(31-1 downto 0)))));
    tmp_298_fu_385_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv768_lc_2),to_integer(unsigned('0' & tmp_296_fu_376_p1(31-1 downto 0)))));
    tmp_299_fu_391_p2 <= (tmp_298_fu_385_p2 and tmp_297_fu_379_p2);
    tmp_300_fu_397_p1 <= tmp_299_fu_391_p2(128 - 1 downto 0);
    tmp_301_fu_401_p2 <= "1" when (unsigned(tmp_s_reg_871) > unsigned(tmp_79_reg_877)) else "0";
    tmp_302_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_871),8));
    tmp_303_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_79_reg_877),8));
    tmp_304_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_339_p3),128));
    tmp_305_fu_415_p2 <= (tmp_302_fu_405_p1 xor ap_const_lv8_7F);
    tmp_306_fu_421_p3 <= 
        tmp_302_fu_405_p1 when (tmp_301_fu_401_p2(0) = '1') else 
        tmp_303_fu_408_p1;
    tmp_307_fu_429_p3 <= 
        tmp_303_fu_408_p1 when (tmp_301_fu_401_p2(0) = '1') else 
        tmp_302_fu_405_p1;
    tmp_308_fu_437_p3 <= 
        tmp_305_fu_415_p2 when (tmp_301_fu_401_p2(0) = '1') else 
        tmp_302_fu_405_p1;
    tmp_309_fu_445_p2 <= (tmp_306_fu_421_p3 xor ap_const_lv8_7F);
    tmp_310_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_308_fu_437_p3),128));
    tmp_311_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_307_fu_429_p3),128));
    tmp_312_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_309_fu_445_p2),128));
    tmp_313_fu_463_p2 <= std_logic_vector(shift_left(unsigned(tmp_304_fu_411_p1),to_integer(unsigned('0' & tmp_310_fu_451_p1(31-1 downto 0)))));
    
    tmp_314_fu_469_p4_proc : process(tmp_313_fu_463_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_314_fu_469_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := tmp_313_fu_463_p2;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_314_fu_469_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_314_fu_469_p4_i) := tmp_313_fu_463_p2(128-1-tmp_314_fu_469_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_314_fu_469_p4 <= resvalue(128-1 downto 0);
    end process;

    tmp_315_fu_479_p3 <= 
        tmp_314_fu_469_p4 when (tmp_301_fu_401_p2(0) = '1') else 
        tmp_313_fu_463_p2;
    tmp_316_fu_487_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_3),to_integer(unsigned('0' & tmp_311_fu_455_p1(31-1 downto 0)))));
    tmp_317_fu_493_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_3),to_integer(unsigned('0' & tmp_312_fu_459_p1(31-1 downto 0)))));
    tmp_318_fu_505_p2 <= (p_demorgan_fu_499_p2 xor ap_const_lv128_lc_3);
    tmp_319_fu_511_p2 <= (tmp_318_fu_505_p2 and tmp_300_fu_397_p1);
    tmp_320_fu_517_p2 <= (tmp_315_fu_479_p3 and p_demorgan_fu_499_p2);
    tmp_321_fu_523_p2 <= (tmp_320_fu_517_p2 or tmp_319_fu_511_p2);
    tmp_323_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_321_reg_929),768));
    tmp_325_fu_547_p3 <= 
        tmp_82_reg_891 when (tmp_322_reg_934(0) = '1') else 
        tmp_83_reg_901;
    tmp_326_fu_552_p3 <= 
        tmp_83_reg_901 when (tmp_322_reg_934(0) = '1') else 
        tmp_82_reg_891;
    tmp_327_fu_557_p3 <= 
        grp_fu_229_p2 when (tmp_322_reg_934(0) = '1') else 
        tmp_82_reg_891;
    tmp_328_fu_563_p2 <= std_logic_vector(signed(ap_const_lv10_2FF) - signed(tmp_325_fu_547_p3));
    tmp_329_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_327_fu_557_p3),768));
    tmp_330_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_326_fu_552_p3),768));
    tmp_331_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_328_fu_563_p2),768));
    tmp_332_fu_581_p2 <= std_logic_vector(shift_left(unsigned(tmp_323_fu_544_p1),to_integer(unsigned('0' & tmp_329_fu_569_p1(31-1 downto 0)))));
    
    tmp_333_fu_587_p4_proc : process(tmp_332_fu_581_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(768+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(768+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(768 - 1 downto 0);
    variable tmp_333_fu_587_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(768 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(768 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(768 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(10 - 1 downto 0) := ap_const_lv32_2FF(10 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(10 - 1 downto 0) := ap_const_lv32_0(10 - 1 downto 0);
        v0_cpy := tmp_332_fu_581_p2;
        if (vlo_cpy(10 - 1 downto 0) > vhi_cpy(10 - 1 downto 0)) then
            vhi_cpy(10-1 downto 0) := std_logic_vector(768-1-unsigned(ap_const_lv32_0(10-1 downto 0)));
            vlo_cpy(10-1 downto 0) := std_logic_vector(768-1-unsigned(ap_const_lv32_2FF(10-1 downto 0)));
            for tmp_333_fu_587_p4_i in 0 to 768-1 loop
                v0_cpy(tmp_333_fu_587_p4_i) := tmp_332_fu_581_p2(768-1-tmp_333_fu_587_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(10-1 downto 0)))));

        section := (others=>'0');
        section(10-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(10-1 downto 0)) - unsigned(vlo_cpy(10-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(768-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_333_fu_587_p4 <= resvalue(768-1 downto 0);
    end process;

    tmp_334_fu_597_p3 <= 
        tmp_333_fu_587_p4 when (tmp_322_reg_934(0) = '1') else 
        tmp_332_fu_581_p2;
    tmp_335_fu_604_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv768_lc_2),to_integer(unsigned('0' & tmp_330_fu_573_p1(31-1 downto 0)))));
    tmp_336_fu_610_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv768_lc_2),to_integer(unsigned('0' & tmp_331_fu_577_p1(31-1 downto 0)))));
    tmp_337_fu_622_p2 <= (p_demorgan1_fu_616_p2 xor ap_const_lv768_lc_2);
    tmp_338_fu_628_p2 <= (tmp_337_fu_622_p2 and data_str_V_fu_140);
    tmp_339_fu_633_p2 <= (tmp_334_fu_597_p3 and p_demorgan1_fu_616_p2);
    tmp_4_fu_339_p3 <= (tmp_285_fu_335_p1 & ap_const_lv24_0);
    tmp_5_fu_794_p2 <= "1" when (tmp_284_fu_790_p1 = ap_const_lv24_0) else "0";
    tmp_79_fu_258_p2 <= (tmp_s_fu_250_p3 or ap_const_lv7_1F);
    tmp_80_fu_666_p3 <= (i5_reg_205 & ap_const_lv5_0);
    tmp_81_fu_674_p2 <= (tmp_80_fu_666_p3 or ap_const_lv8_1F);
    tmp_82_fu_276_p3 <= (j_reg_194 & ap_const_lv7_0);
    tmp_83_fu_286_p2 <= (tmp_82_fu_276_p3 or ap_const_lv10_7F);
    tmp_fu_246_p1 <= i_reg_183(2 - 1 downto 0);
    tmp_s_fu_250_p3 <= (tmp_fu_246_p1 & ap_const_lv5_0);
end behav;
